citation_extractor <- function(gene){
Pubmed_ID <- c()
#iterate through the rsID
for (x in 1:length(gene$rsID)) {
df <- data.frame()
print(x)
# if the rsID is not available put in NA in the vector and   move onto the next
if (is.na(gene$rsID[x])==TRUE){
Pubmed_ID[x]<- "N/A"
print("next")
next
}
# if the rsID is available make the url then try to webscrape. Will pass error
else
print("else")
url <- paste("https://www.ncbi.nlm.nih.gov/snp/",gene$rsID[x],"#publications",sep="")
try(df<- url %>% read_html() %>% html_node(xpath = '//*[@id="publication_datatable"]') %>% html_table())
try(PMID<- as.vector(df$PMID))
try(PMID_string<-paste(PMID, collapse = ', '))
Pubmed_ID[x]<- paste(gene$rsID[x],PMID_string,sep=":")
print(paste(x,url,gene$rsID[x],PMID_string,sep="   "))
}
#append to the end of the clinvar data frame
gene<-cbind(gene,Pubmed_ID)
return(gene)
}
# applying functions to each gene---------
format_by_gene<-function(gene){
gene_filtered_clinvar <- processed_clinvar %>% filter(Gene == as.character(gene))
gene_gnomadjoin <- gnomad_join(gene_filtered_clinvar,as.character(gene))
gene_cite <- citation_extractor(gene_gnomadjoin)
gene_parsed <- clinvar.parse(gene_cite)
gene_name <- gene_parsed %>%
select(VariationID,Name,Gene,GRCh38Location,"rsID","Allele Frequency",Clinical.Significance,Protein.Consequence,Nucleotide.Consequence,Review.Criteria,"Pubmed_ID") %>%
rename("Position"="GRCh38Location","Allele.Frequency"="Allele Frequency")
#write_csv(x=gene_name,path = paste("/clinvar_cache/",gene,"_clinvar.csv",sep=""))
}
format_by_gene("KIF5A")
# ----------
# title: clinvar_cleaner.R
# author: Joshua D Green
# date: October 2019
# description: extracts gene-specific information from the processed clinvar data
# usage:
# ----------
#packages------------------
library("rvest")
library("tidyverse")
library("stringr")
library("data.table")
processed_clinvar <- fread(file ="clinvar_ALS.csv")
# Helper functions---------
# function for parsing and extracting information from the processed clinvar data----------
clinvar.parse <- function(x){
#remove the date for clinical significance column
x$Clinical.Significance <- str_replace(string = x$Clinical.Significance,pattern = "\\(.*\\)",replacement = "")
#extracting information from the Name column in dataframe
x$Protein.Consequence <-str_extract(string= x$Name, pattern = "p\\....\\d*...")
x$Nucleotide.Consequence <-str_extract(string= x$Name, pattern = "c.*>[A,T,G,C]")
# data extracted from the clinvar website
review.criteria<- c()
#for loop that:
#1) webscrapes review criteria from cv website,
#2) performs text manipulation on the scrapped data
#3) adds each scrapped element to an empty vector
for(i in 1:length(x$VariationID)) {
cv.url <- paste("https://www.ncbi.nlm.nih.gov/clinvar/variation/",x$VariationID[i],"/",sep="")
#loading bar
print(paste(i,"of",length(x$VariationID),x$Variation[i],cv.url,sep=" "))
#1) webscrapes review criteria from cv website,
review<- cv.url %>% read_html() %>% html_node(css = '.no-margin-top dd:nth-child(4)') %>% html_text()
#2) performs text manipulation on the scrapped data
review_f <- gsub(pattern = "\\\n || \\s",replacement = "",x = review)
#3) adds each scrapped element to an empty vector
review.criteria[i] <- review_f
}
# appends scrapped review criteria vector to the clinvar data frame
x$Review.Criteria <- review.criteria
x <- as.data.frame(x)
}
# function for joining clinvar dataset with gnomad dataset--------------------------------
gnomad_join <- function(dataframe,gene){ #read in the gnomad gene of interest
#create a file path for each gene gnomad csv.file
file <- paste("gnomad_raw/",gene,"_gnomad.csv",sep="")
#import the gnomad csv file for the appropriate gene
gnomad <- as.data.frame(fread(file))
#make a unique identifier for the gnomad dataset
gnomad$ID <- paste(gnomad$Chromosome,gnomad$Position,sep = ":")
#select only needed columns and reorder so ID is column 1 for gnomad data
gnomad <- gnomad %>% select("ID","Position","rsID","Allele Frequency")
#join data frames by the ID column in the filtered clinvar data set and the gnomad dataset
left_join(dataframe, gnomad,by = "ID")
}
# function for exracting citations for each clinvar variant--------------------------------
citation_extractor <- function(gene){
Pubmed_ID <- c()
#iterate through the rsID
for (x in 1:length(gene$rsID)) {
df <- data.frame()
print(x)
# if the rsID is not available put in NA in the vector and   move onto the next
if (is.na(gene$rsID[x])==TRUE){
Pubmed_ID[x]<- "N/A"
print("next")
next
}
# if the rsID is available make the url then try to webscrape. Will pass error
else
print("else")
url <- paste("https://www.ncbi.nlm.nih.gov/snp/",gene$rsID[x],"#publications",sep="")
try(df<- url %>% read_html() %>% html_node(xpath = '//*[@id="publication_datatable"]') %>% html_table())
try(PMID<- as.vector(df$PMID))
try(PMID_string<-paste(PMID, collapse = ', '))
Pubmed_ID[x]<- paste(gene$rsID[x],PMID_string,sep=":")
print(paste(x,url,gene$rsID[x],PMID_string,sep="   "))
}
#append to the end of the clinvar data frame
gene<-cbind(gene,Pubmed_ID)
return(gene)
}
# applying functions to each gene---------
format_by_gene<-function(gene){
gene_filtered_clinvar <- processed_clinvar %>% filter(Gene == as.character(gene))
gene_gnomadjoin <- gnomad_join(gene_filtered_clinvar,as.character(gene))
gene_cite <- citation_extractor(gene_gnomadjoin)
gene_parsed <- clinvar.parse(gene_cite)
gene_name <- gene_parsed %>%
select(VariationID,Name,Gene,GRCh38Location,"rsID","Allele Frequency",Clinical.Significance,Protein.Consequence,Nucleotide.Consequence,Review.Criteria,"Pubmed_ID") %>%
rename("Position"="GRCh38Location","Allele.Frequency"="Allele Frequency")
#write_csv(x=gene_name,path = paste("/clinvar_cache/",gene,"_clinvar.csv",sep=""))
}
format_by_gene("KIF5A")
format_by_gene("SPG11")
#create a file path for each gene gnomad csv.file
file <- paste("~/gnomad_raw/",gene,"_gnomad.csv",sep="")
# ----------
# title: clinvar_cleaner.R
# author: Joshua D Green
# date: October 2019
# description: extracts gene-specific information from the processed clinvar data
# usage:
# ----------
#packages------------------
library("rvest")
library("tidyverse")
library("stringr")
library("data.table")
processed_clinvar <- fread(file ="clinvar_ALS.csv")
# Helper functions---------
# function for parsing and extracting information from the processed clinvar data----------
clinvar.parse <- function(x){
#remove the date for clinical significance column
x$Clinical.Significance <- str_replace(string = x$Clinical.Significance,pattern = "\\(.*\\)",replacement = "")
#extracting information from the Name column in dataframe
x$Protein.Consequence <-str_extract(string= x$Name, pattern = "p\\....\\d*...")
x$Nucleotide.Consequence <-str_extract(string= x$Name, pattern = "c.*>[A,T,G,C]")
# data extracted from the clinvar website
review.criteria<- c()
#for loop that:
#1) webscrapes review criteria from cv website,
#2) performs text manipulation on the scrapped data
#3) adds each scrapped element to an empty vector
for(i in 1:length(x$VariationID)) {
cv.url <- paste("https://www.ncbi.nlm.nih.gov/clinvar/variation/",x$VariationID[i],"/",sep="")
#loading bar
print(paste(i,"of",length(x$VariationID),x$Variation[i],cv.url,sep=" "))
#1) webscrapes review criteria from cv website,
review<- cv.url %>% read_html() %>% html_node(css = '.no-margin-top dd:nth-child(4)') %>% html_text()
#2) performs text manipulation on the scrapped data
review_f <- gsub(pattern = "\\\n || \\s",replacement = "",x = review)
#3) adds each scrapped element to an empty vector
review.criteria[i] <- review_f
}
# appends scrapped review criteria vector to the clinvar data frame
x$Review.Criteria <- review.criteria
x <- as.data.frame(x)
}
# function for joining clinvar dataset with gnomad dataset--------------------------------
gnomad_join <- function(dataframe,gene){ #read in the gnomad gene of interest
#create a file path for each gene gnomad csv.file
file <- paste("~/gnomad_raw/",gene,"_gnomad.csv",sep="")
#import the gnomad csv file for the appropriate gene
gnomad <- as.data.frame(fread(file))
#make a unique identifier for the gnomad dataset
gnomad$ID <- paste(gnomad$Chromosome,gnomad$Position,sep = ":")
#select only needed columns and reorder so ID is column 1 for gnomad data
gnomad <- gnomad %>% select("ID","Position","rsID","Allele Frequency")
#join data frames by the ID column in the filtered clinvar data set and the gnomad dataset
left_join(dataframe, gnomad,by = "ID")
}
# function for exracting citations for each clinvar variant--------------------------------
citation_extractor <- function(gene){
Pubmed_ID <- c()
#iterate through the rsID
for (x in 1:length(gene$rsID)) {
df <- data.frame()
print(x)
# if the rsID is not available put in NA in the vector and   move onto the next
if (is.na(gene$rsID[x])==TRUE){
Pubmed_ID[x]<- "N/A"
print("next")
next
}
# if the rsID is available make the url then try to webscrape. Will pass error
else
print("else")
url <- paste("https://www.ncbi.nlm.nih.gov/snp/",gene$rsID[x],"#publications",sep="")
try(df<- url %>% read_html() %>% html_node(xpath = '//*[@id="publication_datatable"]') %>% html_table())
try(PMID<- as.vector(df$PMID))
try(PMID_string<-paste(PMID, collapse = ', '))
Pubmed_ID[x]<- paste(gene$rsID[x],PMID_string,sep=":")
print(paste(x,url,gene$rsID[x],PMID_string,sep="   "))
}
#append to the end of the clinvar data frame
gene<-cbind(gene,Pubmed_ID)
return(gene)
}
# applying functions to each gene---------
format_by_gene<-function(gene){
gene_filtered_clinvar <- processed_clinvar %>% filter(Gene == as.character(gene))
gene_gnomadjoin <- gnomad_join(gene_filtered_clinvar,as.character(gene))
gene_cite <- citation_extractor(gene_gnomadjoin)
gene_parsed <- clinvar.parse(gene_cite)
gene_name <- gene_parsed %>%
select(VariationID,Name,Gene,GRCh38Location,"rsID","Allele Frequency",Clinical.Significance,Protein.Consequence,Nucleotide.Consequence,Review.Criteria,"Pubmed_ID") %>%
rename("Position"="GRCh38Location","Allele.Frequency"="Allele Frequency")
#write_csv(x=gene_name,path = paste("/clinvar_cache/",gene,"_clinvar.csv",sep=""))
}
format_by_gene("KIF5A")
processed_clinvar <- fread(file ="clinvar_ALS.csv")
# Helper functions---------
# function for parsing and extracting information from the processed clinvar data----------
clinvar.parse <- function(x){
#remove the date for clinical significance column
x$Clinical.Significance <- str_replace(string = x$Clinical.Significance,pattern = "\\(.*\\)",replacement = "")
#extracting information from the Name column in dataframe
x$Protein.Consequence <-str_extract(string= x$Name, pattern = "p\\....\\d*...")
x$Nucleotide.Consequence <-str_extract(string= x$Name, pattern = "c.*>[A,T,G,C]")
# data extracted from the clinvar website
review.criteria<- c()
#for loop that:
#1) webscrapes review criteria from cv website,
#2) performs text manipulation on the scrapped data
#3) adds each scrapped element to an empty vector
for(i in 1:length(x$VariationID)) {
cv.url <- paste("https://www.ncbi.nlm.nih.gov/clinvar/variation/",x$VariationID[i],"/",sep="")
#loading bar
print(paste(i,"of",length(x$VariationID),x$Variation[i],cv.url,sep=" "))
#1) webscrapes review criteria from cv website,
review<- cv.url %>% read_html() %>% html_node(css = '.no-margin-top dd:nth-child(4)') %>% html_text()
#2) performs text manipulation on the scrapped data
review_f <- gsub(pattern = "\\\n || \\s",replacement = "",x = review)
#3) adds each scrapped element to an empty vector
review.criteria[i] <- review_f
}
# appends scrapped review criteria vector to the clinvar data frame
x$Review.Criteria <- review.criteria
x <- as.data.frame(x)
}
# function for joining clinvar dataset with gnomad dataset--------------------------------
gnomad_join <- function(dataframe,gene){ #read in the gnomad gene of interest
#create a file path for each gene gnomad csv.file
file <- paste("/gnomad_raw/",gene,"_gnomad.csv",sep="")
#import the gnomad csv file for the appropriate gene
gnomad <- as.data.frame(fread(file))
#make a unique identifier for the gnomad dataset
gnomad$ID <- paste(gnomad$Chromosome,gnomad$Position,sep = ":")
#select only needed columns and reorder so ID is column 1 for gnomad data
gnomad <- gnomad %>% select("ID","Position","rsID","Allele Frequency")
#join data frames by the ID column in the filtered clinvar data set and the gnomad dataset
left_join(dataframe, gnomad,by = "ID")
}
# function for exracting citations for each clinvar variant--------------------------------
citation_extractor <- function(gene){
Pubmed_ID <- c()
#iterate through the rsID
for (x in 1:length(gene$rsID)) {
df <- data.frame()
print(x)
# if the rsID is not available put in NA in the vector and   move onto the next
if (is.na(gene$rsID[x])==TRUE){
Pubmed_ID[x]<- "N/A"
print("next")
next
}
# if the rsID is available make the url then try to webscrape. Will pass error
else
print("else")
url <- paste("https://www.ncbi.nlm.nih.gov/snp/",gene$rsID[x],"#publications",sep="")
try(df<- url %>% read_html() %>% html_node(xpath = '//*[@id="publication_datatable"]') %>% html_table())
try(PMID<- as.vector(df$PMID))
try(PMID_string<-paste(PMID, collapse = ', '))
Pubmed_ID[x]<- paste(gene$rsID[x],PMID_string,sep=":")
print(paste(x,url,gene$rsID[x],PMID_string,sep="   "))
}
#append to the end of the clinvar data frame
gene<-cbind(gene,Pubmed_ID)
return(gene)
}
# applying functions to each gene---------
format_by_gene<-function(gene){
gene_filtered_clinvar <- processed_clinvar %>% filter(Gene == as.character(gene))
gene_gnomadjoin <- gnomad_join(gene_filtered_clinvar,as.character(gene))
gene_cite <- citation_extractor(gene_gnomadjoin)
gene_parsed <- clinvar.parse(gene_cite)
gene_name <- gene_parsed %>%
select(VariationID,Name,Gene,GRCh38Location,"rsID","Allele Frequency",Clinical.Significance,Protein.Consequence,Nucleotide.Consequence,Review.Criteria,"Pubmed_ID") %>%
rename("Position"="GRCh38Location","Allele.Frequency"="Allele Frequency")
write_csv(x=gene_name,path = paste("/clinvar_cache/",gene,"_clinvar.csv",sep=""))
}
format_by_gene("KIF5A")
# applying functions to each gene---------
format_by_gene<-function(gene){
gene_filtered_clinvar <- processed_clinvar %>% filter(Gene == as.character(gene))
gene_gnomadjoin <- gnomad_join(gene_filtered_clinvar,as.character(gene))
gene_cite <- citation_extractor(gene_gnomadjoin)
gene_parsed <- clinvar.parse(gene_cite)
gene_name <- gene_parsed %>%
select(VariationID,Name,Gene,GRCh38Location,"rsID","Allele Frequency",Clinical.Significance,Protein.Consequence,Nucleotide.Consequence,Review.Criteria,"Pubmed_ID") %>%
rename("Position"="GRCh38Location","Allele.Frequency"="Allele Frequency")
write_csv(x=gene_name,path = paste("ALS-Variant-Viewer-/clinvar_cache/",gene,"_clinvar.csv",sep=""))
}
format_by_gene("KIF5A")
getwd()
setwd("~/")
getwd()
processed_clinvar <- fread(file ="/Users/greenjod/Documents/GitHub/LNG_Scripts/als_app/2)Gene_Formatting/clinvar_ALS.csv")
# Helper functions---------
# function for parsing and extracting information from the processed clinvar data----------
clinvar.parse <- function(x){
#remove the date for clinical significance column
x$Clinical.Significance <- str_replace(string = x$Clinical.Significance,pattern = "\\(.*\\)",replacement = "")
#extracting information from the Name column in dataframe
x$Protein.Consequence <-str_extract(string= x$Name, pattern = "p\\....\\d*...")
x$Nucleotide.Consequence <-str_extract(string= x$Name, pattern = "c.*>[A,T,G,C]")
# data extracted from the clinvar website
review.criteria<- c()
#for loop that:
#1) webscrapes review criteria from cv website,
#2) performs text manipulation on the scrapped data
#3) adds each scrapped element to an empty vector
for(i in 1:length(x$VariationID)) {
cv.url <- paste("https://www.ncbi.nlm.nih.gov/clinvar/variation/",x$VariationID[i],"/",sep="")
#loading bar
print(paste(i,"of",length(x$VariationID),x$Variation[i],cv.url,sep=" "))
#1) webscrapes review criteria from cv website,
review<- cv.url %>% read_html() %>% html_node(css = '.no-margin-top dd:nth-child(4)') %>% html_text()
#2) performs text manipulation on the scrapped data
review_f <- gsub(pattern = "\\\n || \\s",replacement = "",x = review)
#3) adds each scrapped element to an empty vector
review.criteria[i] <- review_f
}
# appends scrapped review criteria vector to the clinvar data frame
x$Review.Criteria <- review.criteria
x <- as.data.frame(x)
}
# function for joining clinvar dataset with gnomad dataset--------------------------------
gnomad_join <- function(dataframe,gene){ #read in the gnomad gene of interest
#create a file path for each gene gnomad csv.file
file <- paste("~/Documents/GitHub/LNG_Scripts/als_app/als_variants_app/gnomad_raw/",gene,"_gnomad.csv",sep="")
#import the gnomad csv file for the appropriate gene
gnomad <- as.data.frame(fread(file))
#make a unique identifier for the gnomad dataset
gnomad$ID <- paste(gnomad$Chromosome,gnomad$Position,sep = ":")
#select only needed columns and reorder so ID is column 1 for gnomad data
gnomad <- gnomad %>% select("ID","Position","rsID","Allele Frequency")
#join data frames by the ID column in the filtered clinvar data set and the gnomad dataset
left_join(dataframe, gnomad,by = "ID")
}
# function for exracting citations for each clinvar variant--------------------------------
citation_extractor <- function(gene){
Pubmed_ID <- c()
#iterate through the rsID
for (x in 1:length(gene$rsID)) {
df <- data.frame()
print(x)
# if the rsID is not available put in NA in the vector and   move onto the next
if (is.na(gene$rsID[x])==TRUE){
Pubmed_ID[x]<- "N/A"
print("next")
next
}
# if the rsID is available make the url then try to webscrape. Will pass error
else
print("else")
url <- paste("https://www.ncbi.nlm.nih.gov/snp/",gene$rsID[x],"#publications",sep="")
try(df<- url %>% read_html() %>% html_node(xpath = '//*[@id="publication_datatable"]') %>% html_table())
try(PMID<- as.vector(df$PMID))
try(PMID_string<-paste(PMID, collapse = ', '))
Pubmed_ID[x]<- paste(gene$rsID[x],PMID_string,sep=":")
print(paste(x,url,gene$rsID[x],PMID_string,sep="   "))
}
#append to the end of the clinvar data frame
gene<-cbind(gene,Pubmed_ID)
return(gene)
}
# applying functions to each gene---------
format_by_gene<-function(gene){
gene_filtered_clinvar <- processed_clinvar %>% filter(Gene == as.character(gene))
gene_gnomadjoin <- gnomad_join(gene_filtered_clinvar,as.character(gene))
gene_cite <- citation_extractor(gene_gnomadjoin)
gene_parsed <- clinvar.parse(gene_cite)
gene_name <- gene_parsed %>%
select(VariationID,Name,Gene,GRCh38Location,"rsID","Allele Frequency",Clinical.Significance,Protein.Consequence,Nucleotide.Consequence,Review.Criteria,"Pubmed_ID") %>%
rename("Position"="GRCh38Location","Allele.Frequency"="Allele Frequency")
write_csv(x=gene_name,path = paste("~/Documents/GitHub/LNG_Scripts/als_app/als_variants_app/clinvar_cache/",gene,"_clinvar.csv",sep=""))
}
format_by_gene("KIF5A")
format_by_gene("SPG11")
# ----------
# title: clinvar_cleaner.R
# author: Joshua D Green
# date: October 2019
# description: extracts gene-specific information from the processed clinvar data
# usage:
# ----------
#packages------------------
library("rvest")
library("tidyverse")
library("stringr")
library("data.table")
processed_clinvar <- fread(file ="/Users/greenjod/Documents/GitHub/LNG_Scripts/als_app/2)Gene_Formatting/clinvar_ALS.csv")
# Helper functions---------
# function for parsing and extracting information from the processed clinvar data----------
clinvar.parse <- function(x){
#remove the date for clinical significance column
x$Clinical.Significance <- str_replace(string = x$Clinical.Significance,pattern = "\\(.*\\)",replacement = "")
#extracting information from the Name column in dataframe
x$Protein.Consequence <-str_extract(string= x$Name, pattern = "p\\....\\d*...")
x$Nucleotide.Consequence <-str_extract(string= x$Name, pattern = "c.*>[A,T,G,C]")
# data extracted from the clinvar website
review.criteria<- c()
#for loop that:
#1) webscrapes review criteria from cv website,
#2) performs text manipulation on the scrapped data
#3) adds each scrapped element to an empty vector
for(i in 1:length(x$VariationID)) {
cv.url <- paste("https://www.ncbi.nlm.nih.gov/clinvar/variation/",x$VariationID[i],"/",sep="")
#loading bar
print(paste(i,"of",length(x$VariationID),x$Variation[i],cv.url,sep=" "))
#1) webscrapes review criteria from cv website,
review<- cv.url %>% read_html() %>% html_node(css = '.no-margin-top dd:nth-child(4)') %>% html_text()
#2) performs text manipulation on the scrapped data
review_f <- gsub(pattern = "\\\n || \\s",replacement = "",x = review)
#3) adds each scrapped element to an empty vector
review.criteria[i] <- review_f
}
# appends scrapped review criteria vector to the clinvar data frame
x$Review.Criteria <- review.criteria
x <- as.data.frame(x)
}
# function for joining clinvar dataset with gnomad dataset--------------------------------
gnomad_join <- function(dataframe,gene){ #read in the gnomad gene of interest
#create a file path for each gene gnomad csv.file
file <- paste("/gnomad_raw/",gene,"_gnomad.csv",sep="")
#import the gnomad csv file for the appropriate gene
gnomad <- as.data.frame(fread(file))
#make a unique identifier for the gnomad dataset
gnomad$ID <- paste(gnomad$Chromosome,gnomad$Position,sep = ":")
#select only needed columns and reorder so ID is column 1 for gnomad data
gnomad <- gnomad %>% select("ID","Position","rsID","Allele Frequency")
#join data frames by the ID column in the filtered clinvar data set and the gnomad dataset
left_join(dataframe, gnomad,by = "ID")
}
# function for exracting citations for each clinvar variant--------------------------------
citation_extractor <- function(gene){
Pubmed_ID <- c()
#iterate through the rsID
for (x in 1:length(gene$rsID)) {
df <- data.frame()
print(x)
# if the rsID is not available put in NA in the vector and   move onto the next
if (is.na(gene$rsID[x])==TRUE){
Pubmed_ID[x]<- "N/A"
print("next")
next
}
# if the rsID is available make the url then try to webscrape. Will pass error
else
print("else")
url <- paste("https://www.ncbi.nlm.nih.gov/snp/",gene$rsID[x],"#publications",sep="")
try(df<- url %>% read_html() %>% html_node(xpath = '//*[@id="publication_datatable"]') %>% html_table())
try(PMID<- as.vector(df$PMID))
try(PMID_string<-paste(PMID, collapse = ', '))
Pubmed_ID[x]<- paste(gene$rsID[x],PMID_string,sep=":")
print(paste(x,url,gene$rsID[x],PMID_string,sep="   "))
}
#append to the end of the clinvar data frame
gene<-cbind(gene,Pubmed_ID)
return(gene)
}
# applying functions to each gene---------
format_by_gene<-function(gene){
gene_filtered_clinvar <- processed_clinvar %>% filter(Gene == as.character(gene))
gene_gnomadjoin <- gnomad_join(gene_filtered_clinvar,as.character(gene))
gene_cite <- citation_extractor(gene_gnomadjoin)
gene_parsed <- clinvar.parse(gene_cite)
gene_name <- gene_parsed %>%
select(VariationID,Name,Gene,GRCh38Location,"rsID","Allele Frequency",Clinical.Significance,Protein.Consequence,Nucleotide.Consequence,Review.Criteria,"Pubmed_ID") %>%
rename("Position"="GRCh38Location","Allele.Frequency"="Allele Frequency")
write_csv(x=gene_name,path = paste("/clinvar_cache/",gene,"_clinvar.csv",sep=""))
}
format_by_gene("KIF5A")
processed_clinvar <- fread(file ="2)Gene_Formatting/clinvar_ALS.csv")
processed_clinvar <- fread(file ="/2)Gene_Formatting/clinvar_ALS.csv")
processed_clinvar <- fread(file ="1)RawClinvar_Processing/clinvar_ALS.csv")
processed_clinvar <- fread(file ="1)RawClinvar_Processing/clinvar_ALS.csv")
processed_clinvar <- fread(file ="/2)Gene_Formatting/clinvar_ALS.csv")
setwd("/Users/greenjod/Documents/GitHub/ALS-Variant-Viewer-")
processed_clinvar <- fread(file ="/2)Gene_Formatting/clinvar_ALS.csv")
setwd("/Users/greenjod/Documents/GitHub/ALS-Variant-Viewer-/")
processed_clinvar <- fread(file ="2)Gene_Formatting/clinvar_ALS.csv")
